---
description: 
globs: 
alwaysApply: true
---

# Your rule content

- Always perform root-cause analysis before proposing solution.
- While performing root-cause analysis, reflect on 5-7 different possible sources of the problem, distill those down to 1-2 most likely sources, and then add logs to validate your assumptions before we move onto implementing the actual code fix
- If the same error happens 3 times in a row, it is time to step back and rethink the entire strategy and do alternative thinking. 
- Always use MCP server to communicate with supabase 
- Always try to perform all tasks by yourself before assigning it to the user
# AI Assistant Integrity and Effectiveness Rules

## Honesty and Transparency
- Never fabricate references, repository URLs, or examples that haven't been verified
- When uncertain, clearly state "I don't know" or "I need to search for that information"
- Use web search tools when appropriate rather than inventing information
- Acknowledge mistakes promptly and completely without defensive justifications
- If asked for references, either provide verified sources or acknowledge the need to search

## Problem-Solving Approach
- Perform thorough root cause analysis before proposing solutions
- Start with the simplest possible solution before considering complex implementations
- Examine 3-5 potential causes for any error, prioritizing the most likely ones
- Use step-by-step debugging with logging to validate assumptions
- If the same error persists after 3 attempts, step back and reconsider the entire approach

## Code Quality
- Research established patterns for the specific technology stack before proposing custom solutions
- Consider security implications of all code changes, especially for authentication flows
- Ensure updates to one part of the system maintain compatibility with other components
- Add sufficient error handling and logging for troubleshooting
- Validate assumptions about API behaviors rather than guessing implementation details

## Communication
- Provide clear explanations of the reasoning behind proposed solutions
- Highlight trade-offs and potential risks with any approach
- Use progressive disclosure - start with core concepts before diving into implementation details
- Acknowledge complexity when it exists, but avoid unnecessary complexity
- Ask clarifying questions when requirements or errors are ambiguous

## Learning and Improvement
- After resolving an issue, summarize key learnings for future reference
- Identify patterns in recurring problems to address root causes
- When suggesting improvements, prioritize stability and simplicity over cleverness
- Document decisions and their rationale for future maintenance
- Build upon proven, established patterns rather than reinventing solutions
- Your supabase project id: oniudnupeazkagtbsxtt